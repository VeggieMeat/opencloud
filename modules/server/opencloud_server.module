<?php

/**
 * @file
 * Allows Openstack servers to be managed through Drupal.
 */

/**
 * Implements hook_entity_info().
 */
function opencloud_server_entity_info() {
  $entity = array(
    'opencloud_server' => array(
      'label' => t('Server'),
      'plural label' => t('Servers'),
      'description' => t('OpenStack servers'),
      'controller class' => 'EntityAPIController',
      'base table' => 'opencloud_server',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'server_id',
        'bundle' => 'provider_id',
        'label' => 'name',
      ),
      'bundle keys' => array(
        'bundle' => 'provider_id',
      ),
      'view modes' => array(
        'administrator' => array(
          'label' => t('Administrator'),
          'custom settings' => FALSE,
        ),
        'customer' => array(
          'label' => t('Customer'),
          'custom settings' => FALSE,
        ),
      ),
    ),
  );

  return $entity;
}

/**
 * Implements hook_entity_property_info().
 */
function opencloud_server_entity_property_info() {
  $info = array();
  $properties = &$info['opencloud_server']['properties'];

  $properties['server_id'] = array(
    'label' => t('Server ID'),
    'description' => t('The unique server ID.'),
    'schema field' => 'server_id',
  );
  $properties['provider_id'] = array(
    'label' => t('Provider ID'),
    'description' => t('The Provider this server belongs to.'),
    'setter callback' => 'entity_property_verbatim_set',
    'required' => TRUE,
    'schema field' => 'provider_id',
  );
  $properties['name'] = array(
    'label' => t('Name'),
    'description' => t('The name of the server.'),
    'setter callback' => 'entity_property_verbatim_set',
    'required' => TRUE,
    'schema field' => 'name',
  );
  $properties['status'] = array(
    'label' => t('Status'),
    'description' => t('The current status of this server.'),
    'setter callback' => 'entity_property_verbatim_set',
    'schema field' => 'status',
  );
  $properties['hostid'] = array(
    'label' => t('Host ID'),
    'description' => t('The host that this server resides on.'),
    'setter callback' => 'entity_property_verbatim_set',
    'schema field' => 'hostid',
  );
  $properties['uuid'] = array(
    'label' => t('UUID'),
    'description' => t('The UUID of this server.'),
    'setter callback' => 'entity_property_verbatim_set',
    'schema field' => 'uuid',
  );
  $properties['image'] = array(
    'label' => t('Image UUID'),
    'description' => t('The UUID of the image used to build this server.'),
    'setter callback' => 'entity_property_verbatim_set',
    'schema field' => 'image',
  );
  $properties['flavor'] = array(
    'label' => t('Flavor'),
    'description' => t('The flavor of this server.'),
    'setter callback' => 'entity_property_verbatim_set',
    'schema field' => 'flavor',
  );
  $properties['addresses'] = array(
    'label' => t('IP Addresses'),
    'description' => t('The networks and IP addresses for this server.'),
    'setter callback' => 'entity_property_verbatim_set',
    'schema field' => 'addresses',
  );

  return $info;
}

/**
 * Implements hook_field_extra_fields().
 */
function opencloud_server_field_extra_fields() {
  $extra = array();

  $extra['opencloud_server']['opencloud_server'] = array(
    'form' => array(
      'name' => array(
        'label' => t('Name'),
        'description' => t('The server name form element.'),
        'weight' => -10,
      ),
      'provider_id' => array(
        'label' => t('Provider'),
        'description' => t('The provider name form element.'),
        'weight' => -5,
      ),
      'flavor' => array(
        'label' => t('Flavor'),
        'description' => t('The server flavor form element.'),
        'weight' => 0,
      ),
     'image' => array(
        'label' => t('Image'),
        'description' => t('The server image form element.'),
        'weight' => 0,
      ),
    ),
    'display' => array(
      'name' => array(
        'label' => t('Name'),
        'description' => t('The name of this server.'),
        'weight' => -10,
      ),
      'provider_id' => array(
        'label' => t('Provider'),
        'description' => t('The provider for this server.'),
        'weight' => -5,
      ),
      'flavor' => array(
        'label' => t('Flavor'),
        'description' => t('The flavor for this server.'),
        'weight' => 0,
      ),
      'image' => array(
        'label' => t('Image'),
        'description' => t('The image to use for this server.'),
        'weight' => 0,
      ),
    ),
  );

  return $extra;
}

/**
 * Implements hook_permission().
 */
function opencloud_server_permission() {
  return opencloud_entity_access_permissions('opencloud_server');
}

/**
 * Create a Server.
 *
 * @return obj
 *   A new Server object.
 */
function opencloud_server_create($values = array()) {
  return entity_create('opencloud_server', $values);
}

/**
 * Load a Server.
 *
 * @param int $server_id
 *   The ID of the Server to load.
 *
 * @return obj
 *   The server object.
 */
function opencloud_server_load($server_id) {
  return reset(entity_load('opencloud_server', array($server_id)));
}

/**
 * Save a Server.
 *
 * @param obj $server
 *   The Server to save.
 *
 * @return
 *   SAVED_NEW or SAVED_UPDATED or FALSE
 */
function opencloud_server_save($server) {
  return entity_save('opencloud_server', $server);
}

/**
 * Delete a Server.
 *
 * @param int $server_id
 *   The ID of the Server to delete.
 *
 * @return
 *   FALSE if no information was available on how to delete the Server.
 */
function opencloud_server_delete($server_id) {
  return entity_delete('opencloud_server', $server_id);
}

/**
 * Check server access.
 *
 * @param string $op
 *   The operation being performed.
 * @param obj $server
 *   (optional) The server to check access for.
 * @param obj $account
 *   (optional) The account to check access for.
 *
 * @return bool
 *   Whether or not the user has access to this server.
 */
function opencloud_server_access($op, $server = NULL, $account = NULL) {
  return opencloud_access($op, $server, $account, 'opencloud_server');
}

/**
 * Build a Compute object for server operations.
 *
 * @param int $provider_id
 *   The ID of the provider to connect to.
 * @param string $service
 *   The service to connect to.
 *
 * @return obj
 *   An OpenStack Compute object.
 */
function opencloud_server_compute($provider_id) {
  $provider = opencloud_provider_load($provider_id);
  $cloud = opencloud_provider_connect($provider);
  return $cloud->Compute(NULL, $provider->region);
}

/**
 * Create an empty server object.
 *
 * @return
 *   An empty server object.
 */
function opencloud_server_new_server($compute) {
  return $compute->Server();
}

/**
 * Retrieve the data for an existing server.
 *
 * @param string $uuid
 *   The server UUID.
 *
 * @return array
 *   An array of data for the server.
 */
function opencloud_server_fetch_server($compute, $uuid) {
  return $compute->Server($uuid);
}

/**
 * Rebuild an existing server.
 *
 * @param string $id
 *   The ID of the server to rebuild.
 * @param array $options
 *   Certain options may be provided for rebuild:
 *   - name: (optional) Rename the server.
 *   - flavor: (required) The flavor to use for the rebuild.
 *   - image: (required) The image to use for the rebuild.
 */
function opencloud_server_rebuild_server($id, $options = array()) {
  $server = opencloud_server_load($id);

  if (empty($options)) {
    $options['name'] = $server->name;
    $options['flavor'] = $server->flavor;
    $options['image'] = $server->image;
  }
  else {
    $server->name = $options['name'];
    $server->flavor = $options['flavor'];
    $server->image = $options['image'];
  }

  opencloud_server_compute($server->provider_id)->Server($server->uuid)->Rebuild($options);
  opencloud_server_save($server);
}
