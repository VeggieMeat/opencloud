<?php

/**
 * @file
 * Allows Openstack providers to be managed through Drupal.
 */

/**
 * Implements hook_entity_info().
 */
function opencloud_provider_entity_info() {
  $entity = array(
    'opencloud_provider' => array(
      'label' => t('Provider'),
      'plural label' => t('Providers'),
      'description' => t('OpenStack providers'),
      'controller class' => 'EntityAPIController',
      'base table' => 'opencloud_provider',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'provider_id',
        'label' => 'name',
      ),
      'view modes' => array(
        'administrator' => array(
          'label' => t('Administrator'),
          'custom settings' => FALSE,
        ),
        'customer' => array(
          'label' => t('Customer'),
          'custom settings' => FALSE,
        ),
      ),
    ),
  );

  return $entity;
}

/**
 * Implements hook_entity_property_info().
 */
function opencloud_provider_entity_property_info() {
  $info = array();
  $properties = &$info['opencloud_provider']['properties'];

  $properties['provider_id'] = array(
    'label' => t('Provider ID'),
    'description' => t('The unique provider ID.'),
    'schema field' => 'provider_id',
  );
  $properties['name'] = array(
    'label' => t('Name'),
    'description' => t('The name of the provider.'),
    'setter callback' => 'entity_property_verbatim_set',
    'required' => TRUE,
    'schema field' => 'name',
  );
  $properties['url'] = array(
    'label' => t('Authentication URL'),
    'description' => t('The authentication URL for the provider.'),
    'setter callback' => 'entity_property_verbatim_set',
    'required' => TRUE,
    'schema field' => 'url',
  );
  $properties['region'] = array(
    'label' => t('Region'),
    'description' => t('The region these credentials apply to.'),
    'setter callback' => 'entity_property_verbatim_set',
    'required' => TRUE,
    'schema field' => 'region',
  );
 $properties['username'] = array(
    'label' => t('Username'),
    'description' => t('The username for the provider.'),
    'setter callback' => 'entity_property_verbatim_set',
    'required' => TRUE,
    'schema field' => 'username',
  );
  $properties['password'] = array(
    'label' => t('Password'),
    'description' => t('The password or key for the provider.'),
    'setter callback' => 'entity_property_verbatim_set',
    'required' => TRUE,
    'schema field' => 'password',
  );

  return $info;
}

/**
 * Implements hook_field_extra_fields().
 */
function opencloud_provider_field_extra_fields() {
  $extra = array();

  $extra['opencloud_provider']['opencloud_provider'] = array(
    'form' => array(
      'name' => array(
        'label' => t('Name'),
        'description' => t('The provider name form element.'),
        'weight' => -10,
      ),
      'url' => array(
        'label' => t('Authentication URL'),
        'description' => t('The authentication URL form element.'),
        'weight' => -5,
      ),
      'region' => array(
        'label' => t('Region'),
        'description' => t('The region form element.'),
        'weight' => 0,
      ),
     'username' => array(
        'label' => t('Username'),
        'description' => t('The username form element.'),
        'weight' => 0,
      ),
      'password' => array(
        'label' => t('Password'),
        'description' => t('The password form element.'),
        'weight' => 0,
      ),
    ),
    'display' => array(
      'name' => array(
        'label' => t('Name'),
        'description' => t('The name of this provider.'),
        'weight' => -10,
      ),
      'url' => array(
        'label' => t('Authentication URL'),
        'description' => t('The authentication URL for this provider.'),
        'weight' => -5,
      ),
      'region' => array(
        'label' => t('Region'),
        'description' => t('The region used for this provider.'),
        'weight' => 0,
      ),
      'username' => array(
        'label' => t('Username'),
        'description' => t('The username used for this provider.'),
        'weight' => 0,
      ),
      'password' => array(
        'label' => t('Password'),
        'description' => t('The password or key to use for this provider.'),
        'weight' => 5,
      ),
    ),
  );

  return $extra;
}

/**
 * Implements hook_permission().
 */
function opencloud_provider_permission() {
  return opencloud_entity_access_permissions('opencloud_provider');
}

/**
 * Implements hook_views_api().
 */
function opencloud_provider_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'opencloud_provider') . '/includes/views',
  );
}

/**
 * Create a Provider.
 *
 * @return obj
 *   An new Provider object.
 */
function opencloud_provider_create($values = array()) {
  return entity_create('opencloud_provider', $values);
}

/**
 * Load a Provider.
 *
 * @param int $provider_id
 *   The ID of the Provider to load.
 *
 * @return obj
 *   The provider object.
 */
function opencloud_provider_load($provider_id) {
  return reset(entity_load('opencloud_provider', array($provider_id)));
}

/**
 * Save a Provider.
 *
 * @param obj $provider
 *   The Provider to save.
 *
 * @return
 *   SAVED_NEW or SAVED_UPDATED or FALSE
 */
function opencloud_provider_save($provider) {
  return entity_save('opencloud_provider', $provider);
}

/**
 * Delete a Provider.
 *
 * @param int $provider_id
 *   The ID of the Provider to delete.
 *
 * @return
 *   FALSE if no information was available on how to delete the Provider.
 */
function opencloud_provider_delete($provider_id) {
  return entity_delete('opencloud_provider', $provider_id);
}

/**
 * Check provider access.
 *
 * @param string $op
 *   The operation being performed.
 * @param obj $provider
 *   (optional) The provider to check access for.
 * @param obj $account
 *   (optional) The account to check access for.
 *
 * @return bool
 *   Whether or not the user has access to this provider.
 */
function opencloud_provider_access($op, $provider = NULL, $account = NULL) {
  return opencloud_access($op, $provider, $account, 'opencloud_provider');
}

/**
 * Connect to a Provider.
 *
 * @param obj $provider
 *   The Provider to connect to.
 *
 * @return obj
 *   An OpenStack connection to the Provider's service.
 */
function opencloud_provider_connect($provider) {
  // Load the OpenCloud library. This point makes sense because it will always
  // have to be loaded here.
  opencloud_load_library();

  // Some providers like Rackspace have special implementations of the API.
  if (class_exists('OpenCloud\\' . $provider->name)) {
    $class = 'OpenCloud\\' . $provider->name;
  }
  else {
    // Use the generic OpenStack class.
    $class = 'OpenCloud\OpenStack';
  }

  // Setup our credentials array.
  if ('Rackspace' == $provider->name) {
    $credentials = array(
      'username' => $provider->username,
      'apiKey' => $provider->password,
    );
  }
  else {
    $credentials = array(
      'username' => $provider->username,
      'password' => $provider->password,
    );
  }

  // Create a new connection object.
  return new $class($provider->url, $credentials);
}
